http {
  host = "0.0.0.0"
  host = ${mq2kafka.http.host}
  port = 8000
  port = ${mq2kafka.http.port}
  keep_alive = 30
  keep_alive = ${mq2kafka.http.keepAlive}
  shutdown_timeout = ${mq2kafka.http.shutdownTimeout}
}

kafka {
  client_id = "Audit MQ to Kafka"
  client_id = ${mq2kafka.kafka.clientId}
  socket_timeout_ms = 3000
  socket_timeout_ms = ${mq2kafka.kafka.socketTimeoutMs}
  # Only one message can be keeped in local queue
  queue_buffering_max_messages = 1
  queue_buffering_max_messages = ${mq2kafka.kafka.queueBufferingMaxMessages}
  # See https://github.com/edenhill/librdkafka/blob/master/CONFIGURATION.md
  enable_idempotence = true
  enable_idempotence = ${mq2kafka.kafka.enableIdempotence}
  message_send_max_retries_ms = 3
  message_send_max_retries_ms = ${mq2kafka.kafka.messageSendMaxRetriesMs}
  # The backoff time in milliseconds before retrying a protocol request.
  retry_backoff_ms = 100
  retry_backoff_ms = ${mq2kafka.kafka.retryBackoffMs}

  topics {
    events_uncritical = audit-events-uncrit-in
    events_uncritical = ${mq2kafka.kafka.topic.events.uncritical}
    events_critical = audit-events-crit-in
    events_critical = ${mq2kafka.kafka.topic.events.critical}
    meta_model = audit-mm-in
    meta_model = ${mq2kafka.kafka.topic.metaModel}
    events_batch = audit-batch-events-in
    events_batch = ${mq2kafka.kafka.topic.eventsBatch}
  }

  bootstrap_servers = "0.0.0.0:9092"
  bootstrap_servers = ${mq2kafka.kafka.bootstrap.servers}
  # Possible values PLAINTEXT, SSL
  security_protocol = PLAINTEXT
  security_protocol = ${mq2kafka.kafka.security.protocol}
  message_timeout = 1000
  message_timeout = ${mq2kafka.kafka.messageTimeout}

  # SSL configuration
  ssl {
    enabled = ${mq2kafka.kafka.ssl.enabled}
    enabled_protocols = ${?mq2kafka.kafka.messageTimeout}
    endpoint_identification_algorithm = ${?mq2kafka.kafka.messageTimeout}
    truststore {
      store_type = ${?mq2kafka.kafka.ssl.truststore.storeType}
      location = ${?mq2kafka.kafka.ssl.truststore.location}
      password = ${?mq2kafka.kafka.ssl.truststore.password}
    }

    keystore {
      store_type = ${?mq2kafka.ssl.kafka.keystore.storeType}
      location = ${?mq2kafka.ssl.kafka.keystore.location}
      password = ${?mq2kafka.ssl.kafka.keystore.password}
      key_password = ${?mq2kafka.ssl.kafka.keystore.keyPassword}
    }
  }
}

# MQ factories list
mq {
  workers_per_factory = ${mq2kafka.mq.workersPerFactory}

  audit = {
    enabled = true
    server_name = ${mq2kafka.wmqcf.ufsAuditCF.qmgrHostname}
    server_port = ${mq2kafka.wmqcf.ufsAuditCF.qmgrPortNumber}
    queue_manager = ${mq2kafka.wmqcf.ufsAuditCF.qmgrName}
    channel_name = ${mq2kafka.wmqcf.ufsAuditCF.qmgrSvrconnChannel}
    target_queue = ${mq2kafka.wmqcf.ufsAuditCF.queue}
    fips_required = ${mq2kafka.wmqcf.ufsAuditCF.fipsRequired}
    user_id = ${?mq2kafka.wmqcf.ufsAuditCF.user}
    password = ${?mq2kafka.wmqcf.ufsAuditCF.password}

    # SSL fields
    ssl_enabled = ${mq2kafka.wmqcf.ufsAuditCF.ssl_enabled}
    ssl_key_repos_stem = ${?mq2kafka.wmqcf.ufsAuditCF.ssl_key_repos_stem}
    cipher_spec = ${?mq2kafka.wmqcf.ufsAuditCF.cipher_spec}
    certificate_label = ${?mq2kafka.wmqcf.ufsAuditCF.certificate_label}
    oscp_url = ${?mq2kafka.wmqcf.ufsAuditCF.oscp_url}

    # Available EncryptionPolicySuiteB
    # Possible values (max 4 in array):
    # MQ_SUITE_B_NOT_AVAILABLE       0
    # MQ_SUITE_B_NONE                1
    # MQ_SUITE_B_128_BIT             2
    # MQ_SUITE_B_192_BIT             4
    suite_b = [
      ${mq2kafka.wmqcf.ufsAuditCF.suite_b1},
      ${mq2kafka.wmqcf.ufsAuditCF.suite_b2},
      ${mq2kafka.wmqcf.ufsAuditCF.suite_b3},
      ${mq2kafka.wmqcf.ufsAuditCF.suite_b4}
    ]

    # Certificate Validation Policy Type
    # MQ_CERT_VAL_POLICY_ANY         0
    # MQ_CERT_VAL_POLICY_RFC5280     1
    cert_val_policy = ${?mq2kafka.wmqcf.ufsAuditCF.cert_val_policy}
  }

  factories = [{
    enabled = ${mq2kafka.object.wmqcf_ufsAuditCF1}
    server_name = ${?mq2kafka.wmqcf.ufsAuditCF1.qmgrHostname}
    server_port = ${?mq2kafka.wmqcf.ufsAuditCF1.qmgrPortNumber}
    queue_manager = ${?mq2kafka.wmqcf.ufsAuditCF1.qmgrName}
    channel_name = ${?mq2kafka.wmqcf.ufsAuditCF1.qmgrSvrconnChannel}
    target_queue = ${?mq2kafka.wmqcf.ufsAuditCF1.queue}
    fips_required = ${mq2kafka.wmqcf.ufsAuditCF1.fipsRequired}
    user_id = ${?mq2kafka.wmqcf.ufsAuditCF1.user}
    password = ${?mq2kafka.wmqcf.ufsAuditCF1.password}

    # SSL fields
    ssl_enabled = ${mq2kafka.wmqcf.ufsAuditCF1.ssl_enabled}
    ssl_key_repos_stem = ${?mq2kafka.wmqcf.ufsAuditCF1.ssl_key_repos_stem}
    cipher_spec = ${?mq2kafka.wmqcf.ufsAuditCF1.cipher_spec}
    certificate_label = ${?mq2kafka.wmqcf.ufsAuditCF1.certificate_label}
    oscp_url = ${?mq2kafka.wmqcf.ufsAuditCF1.oscp_url}

    # Available EncryptionPolicySuiteB
    # Possible values (max 4 in array):
    # MQ_SUITE_B_NOT_AVAILABLE       0
    # MQ_SUITE_B_NONE                1
    # MQ_SUITE_B_128_BIT             2
    # MQ_SUITE_B_192_BIT             4
    suite_b = [
       ${mq2kafka.wmqcf.ufsAuditCF1.suite_b1},
       ${mq2kafka.wmqcf.ufsAuditCF1.suite_b2},
       ${mq2kafka.wmqcf.ufsAuditCF1.suite_b3},
       ${mq2kafka.wmqcf.ufsAuditCF1.suite_b4}
    ]

    # Certificate Validation Policy Type
    # MQ_CERT_VAL_POLICY_ANY         0
    # MQ_CERT_VAL_POLICY_RFC5280     1
    cert_val_policy = ${?mq2kafka.wmqcf.ufsAuditCF1.cert_val_policy}
  }, {
    enabled = ${mq2kafka.object.wmqcf_ufsAuditCF2}
    server_name = ${?mq2kafka.wmqcf.ufsAuditCF2.qmgrHostname}
    server_port = ${?mq2kafka.wmqcf.ufsAuditCF2.qmgrPortNumber}
    queue_manager = ${?mq2kafka.wmqcf.ufsAuditCF2.qmgrName}
    channel_name = ${?mq2kafka.wmqcf.ufsAuditCF2.qmgrSvrconnChannel}
    target_queue = ${?mq2kafka.wmqcf.ufsAuditCF2.queue}
    fips_required = ${mq2kafka.wmqcf.ufsAuditCF2.fipsRequired}
    user_id = ${?mq2kafka.wmqcf.ufsAuditCF2.user}
    password = ${?mq2kafka.wmqcf.ufsAuditCF2.password}

    # SSL fields
    ssl_enabled = ${mq2kafka.wmqcf.ufsAuditCF2.ssl_enabled}
    ssl_key_repos_stem = ${?mq2kafka.wmqcf.ufsAuditCF2.ssl_key_repos_stem}
    cipher_spec = ${?mq2kafka.wmqcf.ufsAuditCF2.cipher_spec}
    certificate_label = ${?mq2kafka.wmqcf.ufsAuditCF2.certificate_label}
    oscp_url = ${?mq2kafka.wmqcf.ufsAuditCF2.oscp_url}

    suite_b = [
      ${mq2kafka.wmqcf.ufsAuditCF2.suite_b1},
      ${mq2kafka.wmqcf.ufsAuditCF2.suite_b2},
      ${mq2kafka.wmqcf.ufsAuditCF2.suite_b3},
      ${mq2kafka.wmqcf.ufsAuditCF2.suite_b4}
    ]

    cert_val_policy = ${?mq2kafka.wmqcf.ufsAuditCF2.cert_val_policy}
  }
]}